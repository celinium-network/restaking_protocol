// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking_protocol/multitokenstake/v1/stake.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MTStakingDenomWhiteList represents the whitelist of denominations for multi-token staking.
type MTStakingDenomWhiteList struct {
	// List of allowed denominations.
	DenomList []string `protobuf:"bytes,1,rep,name=denom_list,json=denomList,proto3" json:"denom_list,omitempty"`
}

func (m *MTStakingDenomWhiteList) Reset()         { *m = MTStakingDenomWhiteList{} }
func (m *MTStakingDenomWhiteList) String() string { return proto.CompactTextString(m) }
func (*MTStakingDenomWhiteList) ProtoMessage()    {}
func (*MTStakingDenomWhiteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{0}
}
func (m *MTStakingDenomWhiteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTStakingDenomWhiteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTStakingDenomWhiteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTStakingDenomWhiteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTStakingDenomWhiteList.Merge(m, src)
}
func (m *MTStakingDenomWhiteList) XXX_Size() int {
	return m.Size()
}
func (m *MTStakingDenomWhiteList) XXX_DiscardUnknown() {
	xxx_messageInfo_MTStakingDenomWhiteList.DiscardUnknown(m)
}

var xxx_messageInfo_MTStakingDenomWhiteList proto.InternalMessageInfo

func (m *MTStakingDenomWhiteList) GetDenomList() []string {
	if m != nil {
		return m.DenomList
	}
	return nil
}

// EquivalentMultiplierRecord represents the exchange rate between a specific token
// and the native token during a particular epoch
type EquivalentMultiplierRecord struct {
	// Epoch number.
	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// The denom of token.
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// multiplier represents the exchange rate from the token to the native token and is expressed as a decimal value.
	Multiplier Dec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=Dec" json:"multiplier"`
}

func (m *EquivalentMultiplierRecord) Reset()         { *m = EquivalentMultiplierRecord{} }
func (m *EquivalentMultiplierRecord) String() string { return proto.CompactTextString(m) }
func (*EquivalentMultiplierRecord) ProtoMessage()    {}
func (*EquivalentMultiplierRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{1}
}
func (m *EquivalentMultiplierRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquivalentMultiplierRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquivalentMultiplierRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquivalentMultiplierRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquivalentMultiplierRecord.Merge(m, src)
}
func (m *EquivalentMultiplierRecord) XXX_Size() int {
	return m.Size()
}
func (m *EquivalentMultiplierRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EquivalentMultiplierRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EquivalentMultiplierRecord proto.InternalMessageInfo

func (m *EquivalentMultiplierRecord) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EquivalentMultiplierRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// MTStakingDelegation represents a multi-token staking delegation.
type MTStakingDelegation struct {
	// Delegator's address.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Validator's address.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Amount being delegated.
	DelegationAmount types.Coin `protobuf:"bytes,3,opt,name=delegation_amount,json=delegationAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"delegation_amount"`
	// Equivalent staked amount.
	EquivalentStakedAmount *types.Coin `protobuf:"bytes,4,opt,name=equivalent_staked_amount,json=equivalentStakedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"equivalent_staked_amount,omitempty"`
}

func (m *MTStakingDelegation) Reset()         { *m = MTStakingDelegation{} }
func (m *MTStakingDelegation) String() string { return proto.CompactTextString(m) }
func (*MTStakingDelegation) ProtoMessage()    {}
func (*MTStakingDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{2}
}
func (m *MTStakingDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTStakingDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTStakingDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTStakingDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTStakingDelegation.Merge(m, src)
}
func (m *MTStakingDelegation) XXX_Size() int {
	return m.Size()
}
func (m *MTStakingDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_MTStakingDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_MTStakingDelegation proto.InternalMessageInfo

func (m *MTStakingDelegation) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *MTStakingDelegation) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MTStakingDelegation) GetDelegationAmount() types.Coin {
	if m != nil {
		return m.DelegationAmount
	}
	return types.Coin{}
}

func (m *MTStakingDelegation) GetEquivalentStakedAmount() *types.Coin {
	if m != nil {
		return m.EquivalentStakedAmount
	}
	return nil
}

// MTStakingAgent represents a multi-token staking agent.
type MTStakingAgent struct {
	// Address represent this agent, used for delegate/undelegate/slash.
	AgentAddress string `protobuf:"bytes,1,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	// The denom of staking token.
	StakeDenom string `protobuf:"bytes,2,opt,name=stake_denom,json=stakeDenom,proto3" json:"stake_denom,omitempty"`
	// Validator's address.
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Address is used for receive staking reward
	RewardAddress string `protobuf:"bytes,4,opt,name=reward_address,json=rewardAddress,proto3" json:"reward_address,omitempty"`
	// Amount being staked.
	StakedAmount Int `protobuf:"bytes,5,opt,name=staked_amount,json=stakedAmount,proto3,customtype=Int" json:"staked_amount"`
	// Total shares of all delegtor of this agent.
	Shares Int `protobuf:"bytes,6,opt,name=shares,proto3,customtype=Int" json:"shares"`
	// Reward amount earned by the agent.
	RewardAmount Int `protobuf:"bytes,7,opt,name=reward_amount,json=rewardAmount,proto3,customtype=Int" json:"reward_amount"`
}

func (m *MTStakingAgent) Reset()         { *m = MTStakingAgent{} }
func (m *MTStakingAgent) String() string { return proto.CompactTextString(m) }
func (*MTStakingAgent) ProtoMessage()    {}
func (*MTStakingAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{3}
}
func (m *MTStakingAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTStakingAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTStakingAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTStakingAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTStakingAgent.Merge(m, src)
}
func (m *MTStakingAgent) XXX_Size() int {
	return m.Size()
}
func (m *MTStakingAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_MTStakingAgent.DiscardUnknown(m)
}

var xxx_messageInfo_MTStakingAgent proto.InternalMessageInfo

func (m *MTStakingAgent) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *MTStakingAgent) GetStakeDenom() string {
	if m != nil {
		return m.StakeDenom
	}
	return ""
}

func (m *MTStakingAgent) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MTStakingAgent) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

// MTStakingUnbonding represents the unbonding information for a multi-token staking agent.
type MTStakingUnbonding struct {
	// Agent ID.
	AgentAddress string `protobuf:"bytes,1,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
	// Delegator's address.
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// List of unbonding entries.
	Entries []MTStakingUnbondingEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries"`
}

func (m *MTStakingUnbonding) Reset()         { *m = MTStakingUnbonding{} }
func (m *MTStakingUnbonding) String() string { return proto.CompactTextString(m) }
func (*MTStakingUnbonding) ProtoMessage()    {}
func (*MTStakingUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{4}
}
func (m *MTStakingUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTStakingUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTStakingUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTStakingUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTStakingUnbonding.Merge(m, src)
}
func (m *MTStakingUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *MTStakingUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_MTStakingUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_MTStakingUnbonding proto.InternalMessageInfo

func (m *MTStakingUnbonding) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

func (m *MTStakingUnbonding) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *MTStakingUnbonding) GetEntries() []MTStakingUnbondingEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// MTStakingUnbondingEntry represents an unbonding entry for a multi-token staking agent.
type MTStakingUnbondingEntry struct {
	// Completion time of the unbonding entry.
	CompletionTime time.Time `protobuf:"bytes,1,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	// Initial balance of the unbonding entry.
	InitialBalance types.Coin `protobuf:"bytes,2,opt,name=initial_balance,json=initialBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"initial_balance"`
	// Current balance of the unbonding entry.
	Balance types.Coin `protobuf:"bytes,3,opt,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance"`
}

func (m *MTStakingUnbondingEntry) Reset()         { *m = MTStakingUnbondingEntry{} }
func (m *MTStakingUnbondingEntry) String() string { return proto.CompactTextString(m) }
func (*MTStakingUnbondingEntry) ProtoMessage()    {}
func (*MTStakingUnbondingEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{5}
}
func (m *MTStakingUnbondingEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MTStakingUnbondingEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MTStakingUnbondingEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MTStakingUnbondingEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MTStakingUnbondingEntry.Merge(m, src)
}
func (m *MTStakingUnbondingEntry) XXX_Size() int {
	return m.Size()
}
func (m *MTStakingUnbondingEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MTStakingUnbondingEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MTStakingUnbondingEntry proto.InternalMessageInfo

func (m *MTStakingUnbondingEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func (m *MTStakingUnbondingEntry) GetInitialBalance() types.Coin {
	if m != nil {
		return m.InitialBalance
	}
	return types.Coin{}
}

func (m *MTStakingUnbondingEntry) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

// DAPair represents a delegation-agent pair.
type DAPair struct {
	// Delegator's address.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Agent ID.
	AgentAddress string `protobuf:"bytes,2,opt,name=agent_address,json=agentAddress,proto3" json:"agent_address,omitempty"`
}

func (m *DAPair) Reset()         { *m = DAPair{} }
func (m *DAPair) String() string { return proto.CompactTextString(m) }
func (*DAPair) ProtoMessage()    {}
func (*DAPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{6}
}
func (m *DAPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAPair.Merge(m, src)
}
func (m *DAPair) XXX_Size() int {
	return m.Size()
}
func (m *DAPair) XXX_DiscardUnknown() {
	xxx_messageInfo_DAPair.DiscardUnknown(m)
}

var xxx_messageInfo_DAPair proto.InternalMessageInfo

func (m *DAPair) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *DAPair) GetAgentAddress() string {
	if m != nil {
		return m.AgentAddress
	}
	return ""
}

// DAPairs represents a collection of delegation-agent pairs.
type DAPairs struct {
	// List of delegation-agent pairs.
	Pairs []DAPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *DAPairs) Reset()         { *m = DAPairs{} }
func (m *DAPairs) String() string { return proto.CompactTextString(m) }
func (*DAPairs) ProtoMessage()    {}
func (*DAPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e27196179d790277, []int{7}
}
func (m *DAPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DAPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DAPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DAPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAPairs.Merge(m, src)
}
func (m *DAPairs) XXX_Size() int {
	return m.Size()
}
func (m *DAPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_DAPairs.DiscardUnknown(m)
}

var xxx_messageInfo_DAPairs proto.InternalMessageInfo

func (m *DAPairs) GetPairs() []DAPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*MTStakingDenomWhiteList)(nil), "restaking_protocol.multitokenstake.v1.MTStakingDenomWhiteList")
	proto.RegisterType((*EquivalentMultiplierRecord)(nil), "restaking_protocol.multitokenstake.v1.EquivalentMultiplierRecord")
	proto.RegisterType((*MTStakingDelegation)(nil), "restaking_protocol.multitokenstake.v1.MTStakingDelegation")
	proto.RegisterType((*MTStakingAgent)(nil), "restaking_protocol.multitokenstake.v1.MTStakingAgent")
	proto.RegisterType((*MTStakingUnbonding)(nil), "restaking_protocol.multitokenstake.v1.MTStakingUnbonding")
	proto.RegisterType((*MTStakingUnbondingEntry)(nil), "restaking_protocol.multitokenstake.v1.MTStakingUnbondingEntry")
	proto.RegisterType((*DAPair)(nil), "restaking_protocol.multitokenstake.v1.DAPair")
	proto.RegisterType((*DAPairs)(nil), "restaking_protocol.multitokenstake.v1.DAPairs")
}

func init() {
	proto.RegisterFile("restaking_protocol/multitokenstake/v1/stake.proto", fileDescriptor_e27196179d790277)
}

var fileDescriptor_e27196179d790277 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0x8e, 0x63, 0x48, 0x36, 0x13, 0x08, 0xbb, 0x5e, 0xb4, 0x1b, 0x22, 0x6d, 0xc2, 0x46, 0x5a,
	0x6d, 0xa4, 0x36, 0xb6, 0x92, 0x5e, 0xda, 0x43, 0xa9, 0x92, 0x86, 0x4a, 0x48, 0xa5, 0xaa, 0x0c,
	0x55, 0xa5, 0x1e, 0x6a, 0xf9, 0x63, 0xea, 0x8c, 0xb0, 0x67, 0x52, 0xcf, 0x24, 0x94, 0x5b, 0x7f,
	0x41, 0xc5, 0x3f, 0xe8, 0xbd, 0xbd, 0xf2, 0x0f, 0x7a, 0xe1, 0x88, 0x38, 0x55, 0x3d, 0x40, 0x05,
	0xff, 0xa2, 0xa7, 0x6a, 0x66, 0x6c, 0x93, 0x00, 0x52, 0x88, 0xca, 0x29, 0x33, 0xef, 0xc7, 0xf3,
	0x7e, 0x3c, 0xef, 0xbc, 0x31, 0x68, 0x45, 0x90, 0x32, 0x7b, 0x07, 0x61, 0xdf, 0x1a, 0x44, 0x84,
	0x11, 0x97, 0x04, 0x46, 0x38, 0x0c, 0x18, 0x62, 0x64, 0x07, 0x62, 0xae, 0x82, 0xc6, 0xa8, 0x65,
	0x88, 0x83, 0x2e, 0x2c, 0xb4, 0xff, 0xae, 0xba, 0xe8, 0x97, 0x5c, 0xf4, 0x51, 0xab, 0x52, 0xf3,
	0x09, 0xf1, 0x03, 0x68, 0x08, 0x1b, 0x67, 0xf8, 0xc6, 0x60, 0x28, 0xe4, 0x8e, 0xe1, 0x40, 0xe2,
	0x54, 0x96, 0x7d, 0xe2, 0x13, 0x71, 0x34, 0xf8, 0x29, 0x96, 0xae, 0xb8, 0x84, 0x86, 0x84, 0x4a,
	0x68, 0x43, 0x5e, 0x62, 0x55, 0x55, 0xde, 0x0c, 0xc7, 0xa6, 0x3c, 0x29, 0x07, 0x32, 0xbb, 0x65,
	0xb8, 0x04, 0x61, 0xa9, 0xaf, 0xdf, 0x07, 0x7f, 0x6f, 0x6e, 0x6f, 0xc9, 0xd4, 0x7a, 0x10, 0x93,
	0xf0, 0x65, 0x1f, 0x31, 0xf8, 0x14, 0x51, 0xa6, 0xfd, 0x03, 0x80, 0xc7, 0x25, 0x56, 0x80, 0x28,
	0x2b, 0x2b, 0xab, 0x6a, 0xa3, 0x60, 0x16, 0x84, 0x84, 0xab, 0xeb, 0xfb, 0x0a, 0xa8, 0xac, 0xbf,
	0x1d, 0xa2, 0x91, 0x1d, 0x40, 0xcc, 0x36, 0x79, 0x31, 0x83, 0x00, 0xc1, 0xc8, 0x84, 0x2e, 0x89,
	0x3c, 0xed, 0x5f, 0xb0, 0x00, 0x07, 0xc4, 0xed, 0x5b, 0x78, 0x18, 0x3a, 0x30, 0x2a, 0x2b, 0xab,
	0x4a, 0x43, 0x35, 0x8b, 0x42, 0xf6, 0x4c, 0x88, 0xb4, 0x65, 0x30, 0x2f, 0xe0, 0xca, 0xd9, 0x55,
	0xa5, 0x51, 0x30, 0xe5, 0x45, 0x7b, 0x00, 0x40, 0x98, 0x82, 0x95, 0x55, 0xae, 0xea, 0xae, 0x1c,
	0x9e, 0xd4, 0x32, 0xdf, 0x4e, 0x6a, 0x6a, 0x0f, 0xba, 0xc7, 0x07, 0x4d, 0x10, 0x97, 0xd8, 0x83,
	0xae, 0x39, 0x66, 0x5c, 0xff, 0xa8, 0x82, 0x3f, 0xc7, 0xaa, 0x09, 0xa0, 0x6f, 0x33, 0x44, 0xb0,
	0xb6, 0x0e, 0xfe, 0xf0, 0xe4, 0x8d, 0x44, 0x96, 0xed, 0x79, 0x11, 0xa4, 0x54, 0x24, 0x54, 0xe8,
	0x96, 0x8f, 0x0f, 0x9a, 0xcb, 0x31, 0x5c, 0x47, 0x6a, 0xb6, 0x58, 0x84, 0xb0, 0x6f, 0xfe, 0x9e,
	0xba, 0xc4, 0x72, 0x0e, 0x33, 0xb2, 0x03, 0xe4, 0x4d, 0xc0, 0x64, 0xa7, 0xc1, 0xa4, 0x2e, 0x09,
	0xcc, 0x6e, 0x9a, 0x0d, 0x22, 0xd8, 0xb2, 0x43, 0x32, 0xc4, 0x4c, 0xd4, 0x59, 0x6c, 0xaf, 0xe8,
	0x31, 0x06, 0xa7, 0x4b, 0x8f, 0xe9, 0xd2, 0x1f, 0x13, 0x84, 0xbb, 0x06, 0x6f, 0xc1, 0xa7, 0xd3,
	0xda, 0xff, 0x3e, 0x62, 0xfd, 0xa1, 0xa3, 0xbb, 0x24, 0x8c, 0x99, 0x8e, 0x7f, 0x9a, 0xd4, 0xdb,
	0x31, 0xd8, 0xde, 0x00, 0x52, 0xe1, 0x90, 0xe6, 0x8f, 0x08, 0xee, 0x88, 0x18, 0xda, 0x7b, 0x05,
	0x94, 0x61, 0xca, 0x98, 0x25, 0xa6, 0xce, 0x4b, 0x12, 0x98, 0x9b, 0x96, 0xc0, 0x9d, 0x59, 0x82,
	0xff, 0x75, 0x11, 0x67, 0x4b, 0x84, 0x91, 0x29, 0xd4, 0x3f, 0xab, 0xa0, 0x94, 0x32, 0xd4, 0xf1,
	0x21, 0x66, 0xda, 0x43, 0xb0, 0x68, 0xf3, 0xc3, 0x8d, 0x89, 0x59, 0x10, 0xe6, 0x49, 0x37, 0x6b,
	0xa0, 0x28, 0x0a, 0xb1, 0xc6, 0x47, 0x09, 0x08, 0x91, 0x98, 0xe7, 0xeb, 0x59, 0x53, 0x67, 0x66,
	0xed, 0x11, 0x28, 0x45, 0x70, 0xd7, 0x8e, 0xbc, 0x14, 0x63, 0x6e, 0x0a, 0xc6, 0xa2, 0xb4, 0x4f,
	0x00, 0xd6, 0xc0, 0xe2, 0x64, 0xc7, 0xe7, 0x27, 0x47, 0x7b, 0x03, 0xb3, 0xb1, 0xd1, 0xde, 0xc0,
	0xcc, 0x5c, 0xa0, 0x63, 0xad, 0xd3, 0x5a, 0x20, 0x47, 0xfb, 0x76, 0x04, 0x69, 0x39, 0x37, 0xcd,
	0x31, 0x36, 0xe4, 0x21, 0x93, 0x9c, 0x65, 0xc8, 0xfc, 0xd4, 0x90, 0x71, 0xce, 0x92, 0xad, 0x1f,
	0x0a, 0xd0, 0x52, 0xb6, 0x5e, 0x60, 0x87, 0x60, 0x0f, 0x61, 0xff, 0x57, 0x19, 0xbb, 0xf6, 0x35,
	0x66, 0x67, 0x7e, 0x8d, 0xaf, 0x41, 0x1e, 0x62, 0x16, 0x21, 0xc8, 0xd9, 0x54, 0x1b, 0xc5, 0xf6,
	0x9a, 0x7e, 0xa3, 0x25, 0xab, 0x5f, 0xad, 0x68, 0x1d, 0xb3, 0x68, 0xaf, 0x3b, 0xc7, 0xdb, 0x62,
	0x26, 0xa0, 0xf5, 0x2f, 0xd9, 0xb1, 0xd5, 0x38, 0x69, 0xaa, 0x6d, 0x82, 0x25, 0x97, 0x84, 0x83,
	0x00, 0x8a, 0x27, 0xcc, 0x97, 0xb4, 0xe8, 0x41, 0xb1, 0x5d, 0xd1, 0xe5, 0x06, 0xd7, 0x93, 0x0d,
	0xae, 0x6f, 0x27, 0x1b, 0xbc, 0xfb, 0x1b, 0xc7, 0xdf, 0x3f, 0xad, 0x29, 0x66, 0xe9, 0xc2, 0x99,
	0xab, 0x35, 0x0a, 0x96, 0x10, 0x46, 0x0c, 0xd9, 0x81, 0xe5, 0xd8, 0x81, 0x8d, 0x5d, 0x28, 0xfa,
	0x71, 0xbb, 0xfb, 0xa0, 0x14, 0x87, 0xe8, 0xca, 0x08, 0x9a, 0x07, 0xf2, 0x49, 0xb0, 0xdb, 0x5f,
	0x3e, 0x09, 0x74, 0xfd, 0x83, 0x02, 0x72, 0xbd, 0xce, 0x73, 0x1b, 0x45, 0xb7, 0xb5, 0x85, 0xaf,
	0x4c, 0x5f, 0x76, 0x96, 0xe9, 0xab, 0x6f, 0x83, 0xbc, 0xcc, 0x87, 0x6a, 0x1b, 0x60, 0x7e, 0xc0,
	0x0f, 0xe2, 0xbf, 0xad, 0xd8, 0x6e, 0xde, 0x70, 0x7e, 0xa4, 0x7b, 0x3c, 0x2e, 0x12, 0xa1, 0xfb,
	0xe4, 0xf0, 0xac, 0xaa, 0x1c, 0x9d, 0x55, 0x95, 0xef, 0x67, 0x55, 0x65, 0xff, 0xbc, 0x9a, 0x39,
	0x3a, 0xaf, 0x66, 0xbe, 0x9e, 0x57, 0x33, 0xaf, 0xee, 0x5e, 0xf3, 0xb1, 0xf0, 0xee, 0xd2, 0xe7,
	0x02, 0xc2, 0xbe, 0x6c, 0x9e, 0x93, 0x13, 0x36, 0xf7, 0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0x42,
	0x49, 0x2c, 0x61, 0x63, 0x08, 0x00, 0x00,
}

func (m *MTStakingDenomWhiteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTStakingDenomWhiteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTStakingDenomWhiteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomList) > 0 {
		for iNdEx := len(m.DenomList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DenomList[iNdEx])
			copy(dAtA[i:], m.DenomList[iNdEx])
			i = encodeVarintStake(dAtA, i, uint64(len(m.DenomList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EquivalentMultiplierRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquivalentMultiplierRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquivalentMultiplierRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintStake(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MTStakingDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTStakingDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTStakingDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EquivalentStakedAmount != nil {
		{
			size, err := m.EquivalentStakedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStake(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.DelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MTStakingAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTStakingAgent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTStakingAgent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardAmount.Size()
		i -= size
		if _, err := m.RewardAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.StakedAmount.Size()
		i -= size
		if _, err := m.StakedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StakeDenom) > 0 {
		i -= len(m.StakeDenom)
		copy(dAtA[i:], m.StakeDenom)
		i = encodeVarintStake(dAtA, i, uint64(len(m.StakeDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MTStakingUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTStakingUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTStakingUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStake(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MTStakingUnbondingEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MTStakingUnbondingEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MTStakingUnbondingEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.InitialBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintStake(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DAPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DAPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AgentAddress) > 0 {
		i -= len(m.AgentAddress)
		copy(dAtA[i:], m.AgentAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.AgentAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintStake(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DAPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DAPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DAPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStake(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStake(dAtA []byte, offset int, v uint64) int {
	offset -= sovStake(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MTStakingDenomWhiteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomList) > 0 {
		for _, s := range m.DenomList {
			l = len(s)
			n += 1 + l + sovStake(uint64(l))
		}
	}
	return n
}

func (m *EquivalentMultiplierRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovStake(uint64(m.EpochNumber))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovStake(uint64(l))
	return n
}

func (m *MTStakingDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = m.DelegationAmount.Size()
	n += 1 + l + sovStake(uint64(l))
	if m.EquivalentStakedAmount != nil {
		l = m.EquivalentStakedAmount.Size()
		n += 1 + l + sovStake(uint64(l))
	}
	return n
}

func (m *MTStakingAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.StakeDenom)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = m.StakedAmount.Size()
	n += 1 + l + sovStake(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovStake(uint64(l))
	l = m.RewardAmount.Size()
	n += 1 + l + sovStake(uint64(l))
	return n
}

func (m *MTStakingUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovStake(uint64(l))
		}
	}
	return n
}

func (m *MTStakingUnbondingEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovStake(uint64(l))
	l = m.InitialBalance.Size()
	n += 1 + l + sovStake(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovStake(uint64(l))
	return n
}

func (m *DAPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.AgentAddress)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	return n
}

func (m *DAPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovStake(uint64(l))
		}
	}
	return n
}

func sovStake(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStake(x uint64) (n int) {
	return sovStake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MTStakingDenomWhiteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTStakingDenomWhiteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTStakingDenomWhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomList = append(m.DenomList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquivalentMultiplierRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquivalentMultiplierRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquivalentMultiplierRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MTStakingDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTStakingDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTStakingDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalentStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquivalentStakedAmount == nil {
				m.EquivalentStakedAmount = &types.Coin{}
			}
			if err := m.EquivalentStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MTStakingAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTStakingAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTStakingAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MTStakingUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTStakingUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTStakingUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, MTStakingUnbondingEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MTStakingUnbondingEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MTStakingUnbondingEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MTStakingUnbondingEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DAPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DAPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DAPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DAPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, DAPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStake
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStake
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStake
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStake        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStake          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStake = fmt.Errorf("proto: unexpected end of group")
)
