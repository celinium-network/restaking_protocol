// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking_protocol/restaking/coordinator/v1/coordinator.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConsumerAdditionProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ChainId     string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Unbonding period for the consumer,
	UnbondingPeriod time.Duration `protobuf:"bytes,4,opt,name=unbonding_period,json=unbondingPeriod,proto3,stdduration" json:"unbonding_period"`
	// Sent restaking related IBC packets will timeout after this duration
	TimeoutPeriod time.Duration `protobuf:"bytes,5,opt,name=timeout_period,json=timeoutPeriod,proto3,stdduration" json:"timeout_period"`
	// Sent transfer related IBC packets will timeout after this duration
	TransferTimeoutPeriod time.Duration `protobuf:"bytes,6,opt,name=transfer_timeout_period,json=transferTimeoutPeriod,proto3,stdduration" json:"transfer_timeout_period"`
	AvailableCoinDenoms   []string      `protobuf:"bytes,7,rep,name=available_coin_denoms,json=availableCoinDenoms,proto3" json:"available_coin_denoms,omitempty"`
	RewardCoinDenom       []string      `protobuf:"bytes,8,rep,name=reward_coin_denom,json=rewardCoinDenom,proto3" json:"reward_coin_denom,omitempty"`
}

func (m *ConsumerAdditionProposal) Reset()         { *m = ConsumerAdditionProposal{} }
func (m *ConsumerAdditionProposal) String() string { return proto.CompactTextString(m) }
func (*ConsumerAdditionProposal) ProtoMessage()    {}
func (*ConsumerAdditionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7e63be193af8ee, []int{0}
}
func (m *ConsumerAdditionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerAdditionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerAdditionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerAdditionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerAdditionProposal.Merge(m, src)
}
func (m *ConsumerAdditionProposal) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerAdditionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerAdditionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerAdditionProposal proto.InternalMessageInfo

type Operator struct {
	RestakingDenom  string     `protobuf:"bytes,1,opt,name=restaking_denom,json=restakingDenom,proto3" json:"restaking_denom,omitempty"`
	OperatorAddress string     `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	RestakedTokens  types.Coin `protobuf:"bytes,3,opt,name=restaked_tokens,json=restakedTokens,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"restaked_tokens"`
	Shares          Int        `protobuf:"bytes,4,opt,name=shares,proto3,customtype=Int" json:"shares"`
	Validators      []string   `protobuf:"bytes,5,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7e63be193af8ee, []int{1}
}
func (m *Operator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return m.Size()
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

func (m *Operator) GetRestakingDenom() string {
	if m != nil {
		return m.RestakingDenom
	}
	return ""
}

func (m *Operator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *Operator) GetRestakedTokens() types.Coin {
	if m != nil {
		return m.RestakedTokens
	}
	return types.Coin{}
}

func (m *Operator) GetValidators() []string {
	if m != nil {
		return m.Validators
	}
	return nil
}

type Params struct {
	TemplateClient *TendermintLightClientState `protobuf:"bytes,1,opt,name=template_client,json=templateClient,proto3,customtype=TendermintLightClientState" json:"template_client,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad7e63be193af8ee, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConsumerAdditionProposal)(nil), "restaking_protocol.restaking.coordinator.v1.ConsumerAdditionProposal")
	proto.RegisterType((*Operator)(nil), "restaking_protocol.restaking.coordinator.v1.Operator")
	proto.RegisterType((*Params)(nil), "restaking_protocol.restaking.coordinator.v1.Params")
}

func init() {
	proto.RegisterFile("restaking_protocol/restaking/coordinator/v1/coordinator.proto", fileDescriptor_ad7e63be193af8ee)
}

var fileDescriptor_ad7e63be193af8ee = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xbd, 0x4e, 0x1b, 0x4b,
	0x14, 0xf6, 0x62, 0x30, 0x66, 0xd0, 0xc5, 0xdc, 0xbd, 0xa0, 0xbb, 0xa6, 0x58, 0x5b, 0x34, 0xa0,
	0x7b, 0xc5, 0x6e, 0x4c, 0x9a, 0x28, 0x52, 0x0a, 0x6c, 0xa4, 0x08, 0x14, 0x25, 0xc4, 0x50, 0x25,
	0xc5, 0x6a, 0x76, 0xe7, 0xb0, 0x1e, 0xb1, 0x3b, 0x63, 0xcd, 0x8c, 0x9d, 0xe4, 0x0d, 0x52, 0xa6,
	0x4c, 0x99, 0x3a, 0x35, 0x0f, 0x41, 0x91, 0x02, 0x51, 0x45, 0x14, 0x10, 0xc1, 0x8b, 0x44, 0x33,
	0xb3, 0xeb, 0x38, 0xbf, 0xa2, 0xb2, 0xcf, 0xf9, 0x7e, 0xe6, 0xfc, 0x69, 0xd1, 0x23, 0x01, 0x52,
	0xe1, 0x13, 0xca, 0xd2, 0x68, 0x28, 0xb8, 0xe2, 0x09, 0xcf, 0xc2, 0x49, 0x2a, 0x4c, 0x38, 0x17,
	0x84, 0x32, 0xac, 0xb8, 0x08, 0xc7, 0x9d, 0xe9, 0x30, 0x30, 0x6c, 0xf7, 0xff, 0x9f, 0xe5, 0xc1,
	0x24, 0x15, 0x4c, 0xf3, 0xc7, 0x9d, 0xb5, 0x95, 0x94, 0xa7, 0xdc, 0xd0, 0x42, 0xfd, 0xcf, 0x5a,
	0xac, 0xf9, 0x29, 0xe7, 0x69, 0x06, 0xa1, 0x89, 0xe2, 0xd1, 0x71, 0x48, 0x46, 0x02, 0x2b, 0xca,
	0x59, 0x89, 0x27, 0x5c, 0xe6, 0x5c, 0x86, 0x31, 0x96, 0x10, 0x8e, 0x3b, 0x31, 0x28, 0xac, 0x2b,
	0xa1, 0x25, 0xde, 0xb4, 0xb8, 0x7d, 0x3f, 0xb4, 0x81, 0x85, 0xd6, 0x3f, 0x55, 0x91, 0xd7, 0xe3,
	0x4c, 0x8e, 0x72, 0x10, 0x3b, 0x84, 0x50, 0xed, 0x7a, 0x20, 0xf8, 0x90, 0x4b, 0x9c, 0xb9, 0x2b,
	0x68, 0x4e, 0x51, 0x95, 0x81, 0xe7, 0xb4, 0x9d, 0xcd, 0x85, 0xbe, 0x0d, 0xdc, 0x36, 0x5a, 0x24,
	0x20, 0x13, 0x41, 0x87, 0x9a, 0xec, 0xcd, 0x18, 0x6c, 0x3a, 0xe5, 0x36, 0x51, 0x3d, 0x19, 0x60,
	0xca, 0x22, 0x4a, 0xbc, 0xaa, 0x81, 0xe7, 0x4d, 0xbc, 0x47, 0xdc, 0xa7, 0x68, 0x79, 0xc4, 0x62,
	0xce, 0x88, 0x99, 0x07, 0x08, 0xca, 0x89, 0x37, 0xdb, 0x76, 0x36, 0x17, 0xb7, 0x9b, 0x81, 0xed,
	0x32, 0x28, 0xbb, 0x0c, 0x76, 0x8b, 0x2e, 0xbb, 0xf5, 0xb3, 0xab, 0x56, 0xe5, 0xfd, 0x75, 0xcb,
	0xe9, 0x37, 0x26, 0xe2, 0x03, 0xa3, 0x75, 0xf7, 0xd1, 0x92, 0xa2, 0x39, 0xf0, 0x91, 0x2a, 0xdd,
	0xe6, 0xee, 0xee, 0xf6, 0x57, 0x21, 0x2d, 0xbc, 0x5e, 0xa2, 0x7f, 0x95, 0xc0, 0x4c, 0x1e, 0x83,
	0x88, 0x7e, 0x30, 0xad, 0xdd, 0xdd, 0x74, 0xb5, 0xf4, 0x38, 0xfa, 0xce, 0x7c, 0x1b, 0xad, 0xe2,
	0x31, 0xa6, 0x19, 0x8e, 0x33, 0x88, 0xf4, 0x6e, 0x22, 0x02, 0x8c, 0xe7, 0xd2, 0x9b, 0x6f, 0x57,
	0x37, 0x17, 0xfa, 0xff, 0x4c, 0xc0, 0x1e, 0xa7, 0x6c, 0xd7, 0x40, 0xee, 0x7f, 0xe8, 0x6f, 0x01,
	0xaf, 0xb0, 0x20, 0x53, 0x02, 0xaf, 0x6e, 0xf8, 0x0d, 0x0b, 0x4c, 0xc8, 0x0f, 0x67, 0xdf, 0x7e,
	0x68, 0x55, 0xd6, 0x2f, 0x67, 0x50, 0xfd, 0xd9, 0x10, 0x84, 0xbe, 0x27, 0x77, 0x03, 0x35, 0xbe,
	0xdd, 0x9e, 0x15, 0xdb, 0x45, 0x2e, 0x4d, 0xd2, 0x46, 0xeb, 0xf6, 0xd0, 0x32, 0x2f, 0x44, 0x11,
	0x26, 0x44, 0x80, 0x94, 0x76, 0xad, 0x5d, 0xef, 0xe2, 0x74, 0x6b, 0xa5, 0x38, 0x98, 0x1d, 0x8b,
	0x1c, 0x2a, 0x41, 0x59, 0xda, 0x6f, 0x94, 0x8a, 0x22, 0xed, 0xca, 0xf2, 0x35, 0x20, 0x91, 0xe2,
	0x27, 0xc0, 0xa4, 0xd9, 0xbd, 0x9e, 0x5a, 0x61, 0xa0, 0xcf, 0x33, 0x28, 0xce, 0x33, 0xd0, 0x95,
	0x77, 0x43, 0x3d, 0xb5, 0x8f, 0xd7, 0xad, 0x8d, 0x94, 0xaa, 0xc1, 0x28, 0x0e, 0x12, 0x9e, 0x17,
	0xe7, 0x59, 0xfc, 0x6c, 0x49, 0x72, 0x12, 0xaa, 0x37, 0x43, 0x90, 0x46, 0x50, 0x56, 0x0e, 0xe4,
	0xc8, 0xbc, 0xe0, 0x76, 0x50, 0x4d, 0x0e, 0xb0, 0x00, 0x69, 0x8e, 0x68, 0xa1, 0xdb, 0xd4, 0x86,
	0x97, 0x57, 0xad, 0xea, 0x1e, 0x53, 0x17, 0xa7, 0x5b, 0xa8, 0x78, 0x79, 0x8f, 0xa9, 0x7e, 0x41,
	0x74, 0x1f, 0x20, 0x34, 0xc6, 0x19, 0x25, 0xba, 0x76, 0xe9, 0xcd, 0xe9, 0x69, 0xfe, 0xa1, 0xcd,
	0x29, 0xee, 0xfa, 0x73, 0x54, 0x3b, 0xc0, 0x02, 0xe7, 0xd2, 0x7d, 0x8c, 0x1a, 0x0a, 0xf2, 0x61,
	0x86, 0x15, 0x44, 0x49, 0x46, 0x81, 0x29, 0x3b, 0xd9, 0xae, 0x7f, 0x79, 0xd5, 0x5a, 0x3b, 0x02,
	0x46, 0x40, 0xe4, 0x94, 0xa9, 0x27, 0x34, 0x1d, 0xa8, 0x9e, 0x21, 0x1c, 0x2a, 0xac, 0xa0, 0xbf,
	0x54, 0xca, 0x6c, 0xb2, 0xbb, 0x7f, 0x76, 0xe3, 0x3b, 0xe7, 0x37, 0xbe, 0xf3, 0xe5, 0xc6, 0x77,
	0xde, 0xdd, 0xfa, 0x95, 0xf3, 0x5b, 0xbf, 0xf2, 0xf9, 0xd6, 0xaf, 0xbc, 0xb8, 0xf7, 0x8b, 0xaf,
	0xce, 0xeb, 0xdf, 0x7c, 0x77, 0xcc, 0x80, 0xe2, 0x9a, 0xe1, 0xdd, 0xff, 0x1a, 0x00, 0x00, 0xff,
	0xff, 0xc4, 0xef, 0x27, 0xd2, 0xb0, 0x04, 0x00, 0x00,
}

func (m *ConsumerAdditionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerAdditionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerAdditionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardCoinDenom) > 0 {
		for iNdEx := len(m.RewardCoinDenom) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RewardCoinDenom[iNdEx])
			copy(dAtA[i:], m.RewardCoinDenom[iNdEx])
			i = encodeVarintCoordinator(dAtA, i, uint64(len(m.RewardCoinDenom[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AvailableCoinDenoms) > 0 {
		for iNdEx := len(m.AvailableCoinDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailableCoinDenoms[iNdEx])
			copy(dAtA[i:], m.AvailableCoinDenoms[iNdEx])
			i = encodeVarintCoordinator(dAtA, i, uint64(len(m.AvailableCoinDenoms[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TransferTimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCoordinator(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.TimeoutPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutPeriod):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCoordinator(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.UnbondingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintCoordinator(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintCoordinator(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCoordinator(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCoordinator(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintCoordinator(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCoordinator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.RestakedTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCoordinator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintCoordinator(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RestakingDenom) > 0 {
		i -= len(m.RestakingDenom)
		copy(dAtA[i:], m.RestakingDenom)
		i = encodeVarintCoordinator(dAtA, i, uint64(len(m.RestakingDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TemplateClient != nil {
		{
			size := m.TemplateClient.Size()
			i -= size
			if _, err := m.TemplateClient.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintCoordinator(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoordinator(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoordinator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConsumerAdditionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCoordinator(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCoordinator(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovCoordinator(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.UnbondingPeriod)
	n += 1 + l + sovCoordinator(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TimeoutPeriod)
	n += 1 + l + sovCoordinator(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.TransferTimeoutPeriod)
	n += 1 + l + sovCoordinator(uint64(l))
	if len(m.AvailableCoinDenoms) > 0 {
		for _, s := range m.AvailableCoinDenoms {
			l = len(s)
			n += 1 + l + sovCoordinator(uint64(l))
		}
	}
	if len(m.RewardCoinDenom) > 0 {
		for _, s := range m.RewardCoinDenom {
			l = len(s)
			n += 1 + l + sovCoordinator(uint64(l))
		}
	}
	return n
}

func (m *Operator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RestakingDenom)
	if l > 0 {
		n += 1 + l + sovCoordinator(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovCoordinator(uint64(l))
	}
	l = m.RestakedTokens.Size()
	n += 1 + l + sovCoordinator(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovCoordinator(uint64(l))
	if len(m.Validators) > 0 {
		for _, s := range m.Validators {
			l = len(s)
			n += 1 + l + sovCoordinator(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TemplateClient != nil {
		l = m.TemplateClient.Size()
		n += 1 + l + sovCoordinator(uint64(l))
	}
	return n
}

func sovCoordinator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoordinator(x uint64) (n int) {
	return sovCoordinator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsumerAdditionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerAdditionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerAdditionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.UnbondingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferTimeoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.TransferTimeoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableCoinDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableCoinDenoms = append(m.AvailableCoinDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoinDenom = append(m.RewardCoinDenom, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestakingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestakingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestakedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RestakedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateClient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoordinator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v TendermintLightClientState
			m.TemplateClient = &v
			if err := m.TemplateClient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoordinator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoordinator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoordinator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoordinator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoordinator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoordinator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoordinator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoordinator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoordinator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoordinator = fmt.Errorf("proto: unexpected end of group")
)
