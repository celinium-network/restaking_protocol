// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking_protocol/restaking/v1/restaking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Type defines the type of change: Add, Remove, or Update.
type ValidatorSetChange_Type int32

const (
	// The validators has been created at consumer.
	ValidatorSetChange_ADD ValidatorSetChange_Type = 0
	// The validators has been removed at consumer.
	ValidatorSetChange_REMOVE ValidatorSetChange_Type = 1
)

var ValidatorSetChange_Type_name = map[int32]string{
	0: "ADD",
	1: "REMOVE",
}

var ValidatorSetChange_Type_value = map[string]int32{
	"ADD":    0,
	"REMOVE": 1,
}

func (x ValidatorSetChange_Type) String() string {
	return proto.EnumName(ValidatorSetChange_Type_name, int32(x))
}

func (ValidatorSetChange_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{0, 0}
}

// The type of this packet
type CoordinatorPacket_PacketType int32

const (
	// The packet contains delegation data.
	CoordinatorPacket_Delegation CoordinatorPacket_PacketType = 0
	// The packet contains undelegation data.
	CoordinatorPacket_Undelegation CoordinatorPacket_PacketType = 1
	// Slash
	CoordinatorPacket_Slash CoordinatorPacket_PacketType = 2
	// Withdraw Reward
	CoordinatorPacket_WithdrawReward CoordinatorPacket_PacketType = 3
)

var CoordinatorPacket_PacketType_name = map[int32]string{
	0: "Delegation",
	1: "Undelegation",
	2: "Slash",
	3: "WithdrawReward",
}

var CoordinatorPacket_PacketType_value = map[string]int32{
	"Delegation":     0,
	"Undelegation":   1,
	"Slash":          2,
	"WithdrawReward": 3,
}

func (x CoordinatorPacket_PacketType) String() string {
	return proto.EnumName(CoordinatorPacket_PacketType_name, int32(x))
}

func (CoordinatorPacket_PacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{11, 0}
}

// ValidatorSetChange represents changes of consumer validators.
type ValidatorSetChange struct {
	// type specifies the type of change.
	Type ValidatorSetChange_Type `protobuf:"varint,1,opt,name=type,proto3,enum=restaking_protocol.restaking.v1.ValidatorSetChange_Type" json:"type,omitempty"`
	// addresses of consumer validator
	ValidatorAddresses []string `protobuf:"bytes,2,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
}

func (m *ValidatorSetChange) Reset()         { *m = ValidatorSetChange{} }
func (m *ValidatorSetChange) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetChange) ProtoMessage()    {}
func (*ValidatorSetChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{0}
}
func (m *ValidatorSetChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetChange.Merge(m, src)
}
func (m *ValidatorSetChange) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetChange.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetChange proto.InternalMessageInfo

func (m *ValidatorSetChange) GetType() ValidatorSetChange_Type {
	if m != nil {
		return m.Type
	}
	return ValidatorSetChange_ADD
}

func (m *ValidatorSetChange) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

// ValidatorSetChanges represents a collection of validator set changes.
type ValidatorSetChanges struct {
	// validator_set_changes contains the list of validator set changes.
	ValidatorSetChanges []ValidatorSetChange `protobuf:"bytes,1,rep,name=validator_set_changes,json=validatorSetChanges,proto3" json:"validator_set_changes"`
}

func (m *ValidatorSetChanges) Reset()         { *m = ValidatorSetChanges{} }
func (m *ValidatorSetChanges) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetChanges) ProtoMessage()    {}
func (*ValidatorSetChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{1}
}
func (m *ValidatorSetChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetChanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetChanges.Merge(m, src)
}
func (m *ValidatorSetChanges) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetChanges.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetChanges proto.InternalMessageInfo

func (m *ValidatorSetChanges) GetValidatorSetChanges() []ValidatorSetChange {
	if m != nil {
		return m.ValidatorSetChanges
	}
	return nil
}

// ConsumerSlash represents the slashing information for a consumer chain.
type ConsumerSlash struct {
	// operator_address is the address of the operator being slashed.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// slash_factor is the amount by which the validator is being slashed, represented as a decimal.
	SlashFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=slash_factor,json=slashFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slash_factor"`
}

func (m *ConsumerSlash) Reset()         { *m = ConsumerSlash{} }
func (m *ConsumerSlash) String() string { return proto.CompactTextString(m) }
func (*ConsumerSlash) ProtoMessage()    {}
func (*ConsumerSlash) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{2}
}
func (m *ConsumerSlash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerSlash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerSlash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerSlash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerSlash.Merge(m, src)
}
func (m *ConsumerSlash) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerSlash) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerSlash.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerSlash proto.InternalMessageInfo

func (m *ConsumerSlash) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

// ConsumerSlashList represents a list of slashing information for consumer chains.
type ConsumerSlashList struct {
	Slashes []ConsumerSlash `protobuf:"bytes,1,rep,name=slashes,proto3" json:"slashes"`
}

func (m *ConsumerSlashList) Reset()         { *m = ConsumerSlashList{} }
func (m *ConsumerSlashList) String() string { return proto.CompactTextString(m) }
func (*ConsumerSlashList) ProtoMessage()    {}
func (*ConsumerSlashList) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{3}
}
func (m *ConsumerSlashList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerSlashList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerSlashList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerSlashList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerSlashList.Merge(m, src)
}
func (m *ConsumerSlashList) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerSlashList) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerSlashList.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerSlashList proto.InternalMessageInfo

func (m *ConsumerSlashList) GetSlashes() []ConsumerSlash {
	if m != nil {
		return m.Slashes
	}
	return nil
}

// ConsumerPacket contains the data for a consumer packet.
type ConsumerPacket struct {
	ValidatorSetChanges []ValidatorSetChange `protobuf:"bytes,1,rep,name=validator_set_changes,json=validatorSetChanges,proto3" json:"validator_set_changes"`
	ConsumerSlashList   []ConsumerSlash      `protobuf:"bytes,2,rep,name=consumer_slash_list,json=consumerSlashList,proto3" json:"consumer_slash_list"`
}

func (m *ConsumerPacket) Reset()         { *m = ConsumerPacket{} }
func (m *ConsumerPacket) String() string { return proto.CompactTextString(m) }
func (*ConsumerPacket) ProtoMessage()    {}
func (*ConsumerPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{4}
}
func (m *ConsumerPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerPacket.Merge(m, src)
}
func (m *ConsumerPacket) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerPacket.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerPacket proto.InternalMessageInfo

func (m *ConsumerPacket) GetValidatorSetChanges() []ValidatorSetChange {
	if m != nil {
		return m.ValidatorSetChanges
	}
	return nil
}

func (m *ConsumerPacket) GetConsumerSlashList() []ConsumerSlash {
	if m != nil {
		return m.ConsumerSlashList
	}
	return nil
}

// DelegationPacket represents a packet containing delegation information.
type DelegationPacket struct {
	// Operator address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// Address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Amount of tokens to be delegated
	Balance types.Coin `protobuf:"bytes,3,opt,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance"`
}

func (m *DelegationPacket) Reset()         { *m = DelegationPacket{} }
func (m *DelegationPacket) String() string { return proto.CompactTextString(m) }
func (*DelegationPacket) ProtoMessage()    {}
func (*DelegationPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{5}
}
func (m *DelegationPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationPacket.Merge(m, src)
}
func (m *DelegationPacket) XXX_Size() int {
	return m.Size()
}
func (m *DelegationPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationPacket.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationPacket proto.InternalMessageInfo

func (m *DelegationPacket) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *DelegationPacket) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *DelegationPacket) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

// UndelegationPacket represents a packet containing undelegation information.
type UndelegationPacket struct {
	// Operator address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// Address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Amount of tokens to be undelegated.
	Balance types.Coin `protobuf:"bytes,3,opt,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance"`
}

func (m *UndelegationPacket) Reset()         { *m = UndelegationPacket{} }
func (m *UndelegationPacket) String() string { return proto.CompactTextString(m) }
func (*UndelegationPacket) ProtoMessage()    {}
func (*UndelegationPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{6}
}
func (m *UndelegationPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationPacket.Merge(m, src)
}
func (m *UndelegationPacket) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationPacket.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationPacket proto.InternalMessageInfo

func (m *UndelegationPacket) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *UndelegationPacket) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *UndelegationPacket) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

// ConsumerUndelegateResponse contains the completion time for undelegation.
type ConsumerUndelegateResponse struct {
	CompletionTime int64 `protobuf:"varint,1,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
}

func (m *ConsumerUndelegateResponse) Reset()         { *m = ConsumerUndelegateResponse{} }
func (m *ConsumerUndelegateResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumerUndelegateResponse) ProtoMessage()    {}
func (*ConsumerUndelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{7}
}
func (m *ConsumerUndelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerUndelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerUndelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerUndelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerUndelegateResponse.Merge(m, src)
}
func (m *ConsumerUndelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerUndelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerUndelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerUndelegateResponse proto.InternalMessageInfo

func (m *ConsumerUndelegateResponse) GetCompletionTime() int64 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

// WithdrawRewardPacket represents a request to withdraw restaking reward.
type WithdrawRewardPacket struct {
	// Operator address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// Address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Denom            string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	TransferChanel   string `protobuf:"bytes,4,opt,name=transfer_chanel,json=transferChanel,proto3" json:"transfer_chanel,omitempty"`
}

func (m *WithdrawRewardPacket) Reset()         { *m = WithdrawRewardPacket{} }
func (m *WithdrawRewardPacket) String() string { return proto.CompactTextString(m) }
func (*WithdrawRewardPacket) ProtoMessage()    {}
func (*WithdrawRewardPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{8}
}
func (m *WithdrawRewardPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRewardPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRewardPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRewardPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRewardPacket.Merge(m, src)
}
func (m *WithdrawRewardPacket) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRewardPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRewardPacket.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRewardPacket proto.InternalMessageInfo

func (m *WithdrawRewardPacket) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *WithdrawRewardPacket) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *WithdrawRewardPacket) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *WithdrawRewardPacket) GetTransferChanel() string {
	if m != nil {
		return m.TransferChanel
	}
	return ""
}

// WithdrawRewardPacket represents a response to withdraw restaking reward.
type ConsumerWithdrawRewardResponse struct {
	TransferDestChannel string     `protobuf:"bytes,1,opt,name=transfer_dest_channel,json=transferDestChannel,proto3" json:"transfer_dest_channel,omitempty"`
	TransferDestPort    string     `protobuf:"bytes,2,opt,name=transfer_dest_port,json=transferDestPort,proto3" json:"transfer_dest_port,omitempty"`
	TransferDestSeq     uint64     `protobuf:"varint,3,opt,name=transfer_dest_seq,json=transferDestSeq,proto3" json:"transfer_dest_seq,omitempty"`
	Balance             types.Coin `protobuf:"bytes,4,opt,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance"`
}

func (m *ConsumerWithdrawRewardResponse) Reset()         { *m = ConsumerWithdrawRewardResponse{} }
func (m *ConsumerWithdrawRewardResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumerWithdrawRewardResponse) ProtoMessage()    {}
func (*ConsumerWithdrawRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{9}
}
func (m *ConsumerWithdrawRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumerWithdrawRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumerWithdrawRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumerWithdrawRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerWithdrawRewardResponse.Merge(m, src)
}
func (m *ConsumerWithdrawRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsumerWithdrawRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerWithdrawRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerWithdrawRewardResponse proto.InternalMessageInfo

func (m *ConsumerWithdrawRewardResponse) GetTransferDestChannel() string {
	if m != nil {
		return m.TransferDestChannel
	}
	return ""
}

func (m *ConsumerWithdrawRewardResponse) GetTransferDestPort() string {
	if m != nil {
		return m.TransferDestPort
	}
	return ""
}

func (m *ConsumerWithdrawRewardResponse) GetTransferDestSeq() uint64 {
	if m != nil {
		return m.TransferDestSeq
	}
	return 0
}

func (m *ConsumerWithdrawRewardResponse) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

// SlashPacket represents a packet containing slash information
type SlashPacket struct {
	// Operator address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// Address of the validator.
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// Amount of tokens to be slahed.
	Balance types.Coin `protobuf:"bytes,3,opt,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance"`
}

func (m *SlashPacket) Reset()         { *m = SlashPacket{} }
func (m *SlashPacket) String() string { return proto.CompactTextString(m) }
func (*SlashPacket) ProtoMessage()    {}
func (*SlashPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{10}
}
func (m *SlashPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashPacket.Merge(m, src)
}
func (m *SlashPacket) XXX_Size() int {
	return m.Size()
}
func (m *SlashPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashPacket.DiscardUnknown(m)
}

var xxx_messageInfo_SlashPacket proto.InternalMessageInfo

func (m *SlashPacket) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *SlashPacket) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *SlashPacket) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

// CoordinatorPacket represents a packet that send from coordinator to consumer.
type CoordinatorPacket struct {
	// Type of the packet indicating delegation or undelegation.
	Type CoordinatorPacket_PacketType `protobuf:"varint,1,opt,name=type,proto3,enum=restaking_protocol.restaking.v1.CoordinatorPacket_PacketType" json:"type,omitempty"`
	// Data payload of the packet.
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CoordinatorPacket) Reset()         { *m = CoordinatorPacket{} }
func (m *CoordinatorPacket) String() string { return proto.CompactTextString(m) }
func (*CoordinatorPacket) ProtoMessage()    {}
func (*CoordinatorPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{11}
}
func (m *CoordinatorPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorPacket.Merge(m, src)
}
func (m *CoordinatorPacket) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorPacket.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorPacket proto.InternalMessageInfo

func (m *CoordinatorPacket) GetType() CoordinatorPacket_PacketType {
	if m != nil {
		return m.Type
	}
	return CoordinatorPacket_Delegation
}

func (m *CoordinatorPacket) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterEnum("restaking_protocol.restaking.v1.ValidatorSetChange_Type", ValidatorSetChange_Type_name, ValidatorSetChange_Type_value)
	proto.RegisterEnum("restaking_protocol.restaking.v1.CoordinatorPacket_PacketType", CoordinatorPacket_PacketType_name, CoordinatorPacket_PacketType_value)
	proto.RegisterType((*ValidatorSetChange)(nil), "restaking_protocol.restaking.v1.ValidatorSetChange")
	proto.RegisterType((*ValidatorSetChanges)(nil), "restaking_protocol.restaking.v1.ValidatorSetChanges")
	proto.RegisterType((*ConsumerSlash)(nil), "restaking_protocol.restaking.v1.ConsumerSlash")
	proto.RegisterType((*ConsumerSlashList)(nil), "restaking_protocol.restaking.v1.ConsumerSlashList")
	proto.RegisterType((*ConsumerPacket)(nil), "restaking_protocol.restaking.v1.ConsumerPacket")
	proto.RegisterType((*DelegationPacket)(nil), "restaking_protocol.restaking.v1.DelegationPacket")
	proto.RegisterType((*UndelegationPacket)(nil), "restaking_protocol.restaking.v1.UndelegationPacket")
	proto.RegisterType((*ConsumerUndelegateResponse)(nil), "restaking_protocol.restaking.v1.ConsumerUndelegateResponse")
	proto.RegisterType((*WithdrawRewardPacket)(nil), "restaking_protocol.restaking.v1.WithdrawRewardPacket")
	proto.RegisterType((*ConsumerWithdrawRewardResponse)(nil), "restaking_protocol.restaking.v1.ConsumerWithdrawRewardResponse")
	proto.RegisterType((*SlashPacket)(nil), "restaking_protocol.restaking.v1.SlashPacket")
	proto.RegisterType((*CoordinatorPacket)(nil), "restaking_protocol.restaking.v1.CoordinatorPacket")
}

func init() {
	proto.RegisterFile("restaking_protocol/restaking/v1/restaking.proto", fileDescriptor_63af7fa0c4c2b658)
}

var fileDescriptor_63af7fa0c4c2b658 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0xcf, 0x24, 0x69, 0x57, 0xfb, 0x52, 0xb2, 0xce, 0x24, 0x95, 0xd2, 0x45, 0x72, 0x22, 0x0b,
	0xd1, 0x80, 0x58, 0x5b, 0x49, 0x2f, 0x1c, 0x00, 0x69, 0xf3, 0x07, 0x09, 0xa9, 0x85, 0xe2, 0x94,
	0x22, 0x71, 0x89, 0x26, 0xf6, 0x6b, 0x62, 0xad, 0xed, 0x49, 0x3d, 0xd3, 0x94, 0xde, 0xf9, 0x00,
	0x1c, 0xf8, 0x14, 0x9c, 0xcb, 0x67, 0xa0, 0x70, 0xaa, 0x7a, 0x42, 0x1c, 0x0a, 0xda, 0x55, 0x2f,
	0x88, 0x0f, 0x81, 0x3c, 0xb6, 0xe3, 0x64, 0xc3, 0xb2, 0xab, 0x95, 0x00, 0x09, 0x4e, 0xf1, 0xcc,
	0x7b, 0xef, 0x37, 0xef, 0xf7, 0x9b, 0xf7, 0x5e, 0x06, 0xac, 0x08, 0x85, 0x64, 0x47, 0x5e, 0x38,
	0x9b, 0x2c, 0x22, 0x2e, 0xb9, 0xc3, 0xfd, 0x7c, 0xcb, 0x5a, 0x76, 0xf3, 0x85, 0xa9, 0xec, 0xb4,
	0xb5, 0x1d, 0x60, 0xe6, 0x3e, 0xcb, 0xee, 0x7e, 0x63, 0xc6, 0x67, 0x5c, 0x99, 0xac, 0xf8, 0x2b,
	0x09, 0xdb, 0xbf, 0xe1, 0x70, 0x11, 0x70, 0x91, 0xc4, 0x58, 0xc9, 0x22, 0x35, 0xe9, 0xc9, 0xca,
	0x9a, 0x32, 0x81, 0xd6, 0xb2, 0x3b, 0x45, 0xc9, 0xba, 0x96, 0xc3, 0xbd, 0x30, 0xb1, 0x1b, 0x3f,
	0x12, 0xa0, 0xf7, 0x99, 0xef, 0xb9, 0x4c, 0xf2, 0x68, 0x8c, 0x72, 0x30, 0x67, 0xe1, 0x0c, 0xe9,
	0x6d, 0x28, 0xcb, 0x27, 0x0b, 0x6c, 0x92, 0x36, 0xe9, 0x54, 0x7b, 0xef, 0x9a, 0xe7, 0xe4, 0x65,
	0x6e, 0x43, 0x98, 0xf7, 0x9e, 0x2c, 0xd0, 0x56, 0x28, 0xf4, 0x23, 0xa8, 0x2f, 0x33, 0x87, 0x09,
	0x73, 0xdd, 0x08, 0x85, 0x40, 0xd1, 0x2c, 0xb6, 0x4b, 0x9d, 0xdd, 0x7e, 0xf3, 0xc5, 0xd3, 0x83,
	0x46, 0x9a, 0xf3, 0x61, 0x62, 0x1b, 0xcb, 0xc8, 0x0b, 0x67, 0x36, 0x5d, 0x05, 0x1d, 0x66, 0x31,
	0xc6, 0xeb, 0x50, 0x8e, 0x81, 0xe9, 0x0e, 0x94, 0x0e, 0x87, 0x43, 0xad, 0x40, 0x01, 0xae, 0xda,
	0xa3, 0x3b, 0x9f, 0xdc, 0x1f, 0x69, 0xc4, 0xf8, 0x8a, 0x40, 0x7d, 0x3b, 0x13, 0x41, 0x03, 0xb8,
	0x9e, 0x9f, 0x2f, 0x50, 0x4e, 0x9c, 0xc4, 0xd0, 0x24, 0xed, 0x52, 0xa7, 0xd2, 0xbb, 0x75, 0x09,
	0x7a, 0xfd, 0xf2, 0xb3, 0x97, 0xad, 0x82, 0x9d, 0xf3, 0xca, 0x8f, 0x33, 0xbe, 0x23, 0xf0, 0xda,
	0x80, 0x87, 0xe2, 0x51, 0x80, 0xd1, 0xd8, 0x67, 0x62, 0x4e, 0x07, 0xa0, 0xf1, 0x05, 0x46, 0xeb,
	0xfc, 0x95, 0xb4, 0x7f, 0xc5, 0x7e, 0x2f, 0x8b, 0x48, 0xb7, 0xe9, 0x04, 0xae, 0x89, 0x18, 0x6d,
	0xf2, 0x80, 0x39, 0x92, 0x47, 0xcd, 0xa2, 0x02, 0x78, 0x2f, 0xce, 0xe3, 0xe7, 0x97, 0xad, 0x37,
	0x67, 0x9e, 0x9c, 0x3f, 0x9a, 0x9a, 0x0e, 0x0f, 0xd2, 0x0a, 0x48, 0x7f, 0x0e, 0x84, 0x7b, 0x64,
	0xc5, 0xd7, 0x20, 0xcc, 0x21, 0x3a, 0x2f, 0x9e, 0x1e, 0x40, 0x7a, 0xdc, 0x10, 0x1d, 0xbb, 0xa2,
	0x10, 0x3f, 0x54, 0x80, 0x86, 0x03, 0xb5, 0x8d, 0xb4, 0x6f, 0x7b, 0x42, 0xd2, 0x8f, 0x61, 0x47,
	0xf9, 0xac, 0xd4, 0x32, 0xcf, 0x55, 0x6b, 0x03, 0x24, 0x15, 0x2a, 0x03, 0x31, 0x5e, 0x11, 0xa8,
	0x66, 0x0e, 0x77, 0x99, 0x73, 0x84, 0xf2, 0x1f, 0xbe, 0x1e, 0xea, 0x42, 0xdd, 0x49, 0x13, 0x98,
	0x24, 0x82, 0xfa, 0x9e, 0x90, 0xaa, 0x1a, 0x2f, 0xcb, 0xae, 0xe6, 0x9c, 0xd6, 0xcd, 0xf8, 0x8d,
	0x80, 0x36, 0x44, 0x1f, 0x67, 0x4c, 0x7a, 0x3c, 0x4c, 0x99, 0xbe, 0x75, 0x56, 0x1d, 0x6c, 0xdf,
	0xf6, 0x08, 0x6a, 0x5b, 0x3d, 0x93, 0x5e, 0xf9, 0xd9, 0x35, 0xa3, 0x9d, 0xee, 0x18, 0xea, 0xc2,
	0xce, 0x94, 0xf9, 0x2c, 0x74, 0xb0, 0x59, 0x6a, 0x93, 0x4e, 0xa5, 0x77, 0xc3, 0x4c, 0x23, 0xe3,
	0x89, 0x60, 0xa6, 0x13, 0xc1, 0x1c, 0x70, 0x2f, 0xec, 0x5b, 0x31, 0x97, 0x6f, 0x7f, 0x69, 0xdd,
	0xbc, 0x40, 0x29, 0xc5, 0x01, 0x76, 0x06, 0x6d, 0xfc, 0x4e, 0x80, 0x7e, 0x16, 0xba, 0xff, 0x17,
	0xba, 0x23, 0xd8, 0xcf, 0xaa, 0x60, 0xc5, 0x1a, 0x6d, 0x14, 0x0b, 0x1e, 0x0a, 0xa4, 0x37, 0x61,
	0xcf, 0xe1, 0xc1, 0xc2, 0xc7, 0x58, 0x89, 0x89, 0xf4, 0x82, 0x64, 0x8c, 0x96, 0xec, 0x6a, 0xbe,
	0x7d, 0xcf, 0x0b, 0xd0, 0xf8, 0x9e, 0x40, 0xe3, 0x73, 0x4f, 0xce, 0xdd, 0x88, 0x3d, 0xb6, 0xf1,
	0x31, 0x8b, 0xdc, 0x7f, 0x4d, 0xb7, 0x06, 0x5c, 0x71, 0x31, 0xe4, 0x81, 0x52, 0x6d, 0xd7, 0x4e,
	0x16, 0x31, 0x13, 0x19, 0xb1, 0x50, 0x3c, 0xc0, 0x48, 0xf5, 0x24, 0xfa, 0xcd, 0xb2, 0xb2, 0x57,
	0xb3, 0xed, 0x81, 0xda, 0x35, 0xbe, 0x29, 0x82, 0x9e, 0x29, 0xb2, 0xc9, 0x68, 0xa5, 0x4a, 0x0f,
	0xae, 0xaf, 0xb0, 0x5c, 0x14, 0x49, 0x93, 0xc7, 0x88, 0x09, 0xb1, 0x7a, 0x66, 0x1c, 0xa2, 0x50,
	0x9d, 0x1a, 0xa2, 0x4f, 0xdf, 0x01, 0xba, 0x19, 0xb3, 0xe0, 0x91, 0x4c, 0xd8, 0xd9, 0xda, 0x7a,
	0xc0, 0x5d, 0x1e, 0x49, 0xfa, 0x36, 0xd4, 0x36, 0xbd, 0x05, 0x3e, 0x54, 0x7c, 0xca, 0xf6, 0xde,
	0xba, 0xf3, 0x18, 0x1f, 0xae, 0xd7, 0x49, 0xf9, 0xef, 0xab, 0x93, 0x57, 0x04, 0x2a, 0x6a, 0x22,
	0xfc, 0xc7, 0xfb, 0xe1, 0x07, 0x12, 0xff, 0x73, 0xf0, 0xc8, 0xf5, 0xc2, 0xf8, 0xf0, 0x94, 0xed,
	0xa7, 0x1b, 0x6f, 0x88, 0xf7, 0x2f, 0x30, 0x58, 0x4f, 0x21, 0x98, 0xc9, 0xcf, 0xda, 0x43, 0x82,
	0x42, 0xd9, 0x65, 0x92, 0xa5, 0x25, 0xa0, 0xbe, 0x8d, 0x3b, 0x00, 0xb9, 0x1f, 0xad, 0x02, 0xe4,
	0x53, 0x57, 0x2b, 0x50, 0x0d, 0xae, 0xad, 0x0f, 0x26, 0x8d, 0xd0, 0x5d, 0xb8, 0xa2, 0xee, 0x44,
	0x2b, 0x52, 0x0a, 0xd5, 0xcd, 0x6a, 0xd5, 0x4a, 0xfd, 0x0f, 0x9e, 0x1d, 0xeb, 0xe4, 0xf9, 0xb1,
	0x4e, 0x7e, 0x3d, 0xd6, 0xc9, 0xd7, 0x27, 0x7a, 0xe1, 0xf9, 0x89, 0x5e, 0xf8, 0xe9, 0x44, 0x2f,
	0x7c, 0xf1, 0xc6, 0x9f, 0xbc, 0xe6, 0xbe, 0x5c, 0x7b, 0xcf, 0x29, 0x65, 0xa6, 0x57, 0x95, 0xed,
	0xd6, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0x04, 0xf2, 0x13, 0xfc, 0x09, 0x00, 0x00,
}

func (m *ValidatorSetChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintRestaking(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintRestaking(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSetChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorSetChanges) > 0 {
		for iNdEx := len(m.ValidatorSetChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSetChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerSlash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerSlash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerSlash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashFactor.Size()
		i -= size
		if _, err := m.SlashFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerSlashList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerSlashList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerSlashList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Slashes) > 0 {
		for iNdEx := len(m.Slashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Slashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConsumerSlashList) > 0 {
		for iNdEx := len(m.ConsumerSlashList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConsumerSlashList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValidatorSetChanges) > 0 {
		for iNdEx := len(m.ValidatorSetChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSetChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerUndelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerUndelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerUndelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletionTime != 0 {
		i = encodeVarintRestaking(dAtA, i, uint64(m.CompletionTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawRewardPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRewardPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRewardPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferChanel) > 0 {
		i -= len(m.TransferChanel)
		copy(dAtA[i:], m.TransferChanel)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.TransferChanel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsumerWithdrawRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerWithdrawRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumerWithdrawRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.TransferDestSeq != 0 {
		i = encodeVarintRestaking(dAtA, i, uint64(m.TransferDestSeq))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TransferDestPort) > 0 {
		i -= len(m.TransferDestPort)
		copy(dAtA[i:], m.TransferDestPort)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.TransferDestPort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransferDestChannel) > 0 {
		i -= len(m.TransferDestChannel)
		copy(dAtA[i:], m.TransferDestChannel)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.TransferDestChannel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SlashPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoordinatorPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRestaking(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRestaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovRestaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorSetChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRestaking(uint64(m.Type))
	}
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	return n
}

func (m *ValidatorSetChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSetChanges) > 0 {
		for _, e := range m.ValidatorSetChanges {
			l = e.Size()
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	return n
}

func (m *ConsumerSlash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = m.SlashFactor.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *ConsumerSlashList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Slashes) > 0 {
		for _, e := range m.Slashes {
			l = e.Size()
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	return n
}

func (m *ConsumerPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSetChanges) > 0 {
		for _, e := range m.ValidatorSetChanges {
			l = e.Size()
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	if len(m.ConsumerSlashList) > 0 {
		for _, e := range m.ConsumerSlashList {
			l = e.Size()
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	return n
}

func (m *DelegationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *UndelegationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *ConsumerUndelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompletionTime != 0 {
		n += 1 + sovRestaking(uint64(m.CompletionTime))
	}
	return n
}

func (m *WithdrawRewardPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.TransferChanel)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	return n
}

func (m *ConsumerWithdrawRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransferDestChannel)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.TransferDestPort)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	if m.TransferDestSeq != 0 {
		n += 1 + sovRestaking(uint64(m.TransferDestSeq))
	}
	l = m.Balance.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *SlashPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *CoordinatorPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRestaking(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	return n
}

func sovRestaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRestaking(x uint64) (n int) {
	return sovRestaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorSetChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ValidatorSetChange_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSetChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetChanges = append(m.ValidatorSetChanges, ValidatorSetChange{})
			if err := m.ValidatorSetChanges[len(m.ValidatorSetChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerSlash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerSlash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerSlash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerSlashList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerSlashList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerSlashList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slashes = append(m.Slashes, ConsumerSlash{})
			if err := m.Slashes[len(m.Slashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetChanges = append(m.ValidatorSetChanges, ValidatorSetChange{})
			if err := m.ValidatorSetChanges[len(m.ValidatorSetChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsumerSlashList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsumerSlashList = append(m.ConsumerSlashList, ConsumerSlash{})
			if err := m.ConsumerSlashList[len(m.ConsumerSlashList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerUndelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerUndelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerUndelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			m.CompletionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRewardPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRewardPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRewardPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferChanel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferChanel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerWithdrawRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerWithdrawRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerWithdrawRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferDestChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferDestChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferDestPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferDestPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferDestSeq", wireType)
			}
			m.TransferDestSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferDestSeq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoordinatorPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CoordinatorPacket_PacketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRestaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRestaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRestaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRestaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRestaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRestaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRestaking = fmt.Errorf("proto: unexpected end of group")
)
