// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: restaking_protocol/restaking/v1/restaking.proto

package types

import (
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RestakingPacket_PacketType int32

const (
	RestakingPacket_Delegation   RestakingPacket_PacketType = 0
	RestakingPacket_Undelegation RestakingPacket_PacketType = 1
)

var RestakingPacket_PacketType_name = map[int32]string{
	0: "Delegation",
	1: "Undelegation",
}

var RestakingPacket_PacketType_value = map[string]int32{
	"Delegation":   0,
	"Undelegation": 1,
}

func (x RestakingPacket_PacketType) String() string {
	return proto.EnumName(RestakingPacket_PacketType_name, int32(x))
}

func (RestakingPacket_PacketType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{4, 0}
}

type ValidatorSetChange struct {
	ValidatorUpdates []types.ValidatorUpdate `protobuf:"bytes,1,rep,name=validator_updates,json=validatorUpdates,proto3" json:"validator_updates" yaml:"validator_updates"`
	ValsetUpdateId   uint64                  `protobuf:"varint,2,opt,name=valset_update_id,json=valsetUpdateId,proto3" json:"valset_update_id,omitempty"`
}

func (m *ValidatorSetChange) Reset()         { *m = ValidatorSetChange{} }
func (m *ValidatorSetChange) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetChange) ProtoMessage()    {}
func (*ValidatorSetChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{0}
}
func (m *ValidatorSetChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetChange.Merge(m, src)
}
func (m *ValidatorSetChange) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetChange.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetChange proto.InternalMessageInfo

func (m *ValidatorSetChange) GetValidatorUpdates() []types.ValidatorUpdate {
	if m != nil {
		return m.ValidatorUpdates
	}
	return nil
}

func (m *ValidatorSetChange) GetValsetUpdateId() uint64 {
	if m != nil {
		return m.ValsetUpdateId
	}
	return 0
}

type ValidatorSetChanges struct {
	ValidatorSetChanges []ValidatorSetChange `protobuf:"bytes,1,rep,name=validator_set_changes,json=validatorSetChanges,proto3" json:"validator_set_changes"`
}

func (m *ValidatorSetChanges) Reset()         { *m = ValidatorSetChanges{} }
func (m *ValidatorSetChanges) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetChanges) ProtoMessage()    {}
func (*ValidatorSetChanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{1}
}
func (m *ValidatorSetChanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetChanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetChanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetChanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetChanges.Merge(m, src)
}
func (m *ValidatorSetChanges) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetChanges) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetChanges.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetChanges proto.InternalMessageInfo

func (m *ValidatorSetChanges) GetValidatorSetChanges() []ValidatorSetChange {
	if m != nil {
		return m.ValidatorSetChanges
	}
	return nil
}

type DelegationPacket struct {
	OperatorAddress string           `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	ValidatorPk     crypto.PublicKey `protobuf:"bytes,2,opt,name=validator_pk,json=validatorPk,proto3" json:"validator_pk"`
	Amount          types1.Coin      `protobuf:"bytes,3,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *DelegationPacket) Reset()         { *m = DelegationPacket{} }
func (m *DelegationPacket) String() string { return proto.CompactTextString(m) }
func (*DelegationPacket) ProtoMessage()    {}
func (*DelegationPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{2}
}
func (m *DelegationPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationPacket.Merge(m, src)
}
func (m *DelegationPacket) XXX_Size() int {
	return m.Size()
}
func (m *DelegationPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationPacket.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationPacket proto.InternalMessageInfo

func (m *DelegationPacket) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *DelegationPacket) GetValidatorPk() crypto.PublicKey {
	if m != nil {
		return m.ValidatorPk
	}
	return crypto.PublicKey{}
}

func (m *DelegationPacket) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

type UndelegationPacket struct {
	OperatorAddress string           `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	ValidatorPk     crypto.PublicKey `protobuf:"bytes,2,opt,name=validator_pk,json=validatorPk,proto3" json:"validator_pk"`
	Amount          types1.Coin      `protobuf:"bytes,3,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *UndelegationPacket) Reset()         { *m = UndelegationPacket{} }
func (m *UndelegationPacket) String() string { return proto.CompactTextString(m) }
func (*UndelegationPacket) ProtoMessage()    {}
func (*UndelegationPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{3}
}
func (m *UndelegationPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationPacket.Merge(m, src)
}
func (m *UndelegationPacket) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationPacket.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationPacket proto.InternalMessageInfo

func (m *UndelegationPacket) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *UndelegationPacket) GetValidatorPk() crypto.PublicKey {
	if m != nil {
		return m.ValidatorPk
	}
	return crypto.PublicKey{}
}

func (m *UndelegationPacket) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

type RestakingPacket struct {
	Type RestakingPacket_PacketType `protobuf:"varint,1,opt,name=type,proto3,enum=restaking_protocol.restaking.v1.RestakingPacket_PacketType" json:"type,omitempty"`
	Data string                     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RestakingPacket) Reset()         { *m = RestakingPacket{} }
func (m *RestakingPacket) String() string { return proto.CompactTextString(m) }
func (*RestakingPacket) ProtoMessage()    {}
func (*RestakingPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_63af7fa0c4c2b658, []int{4}
}
func (m *RestakingPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestakingPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestakingPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestakingPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestakingPacket.Merge(m, src)
}
func (m *RestakingPacket) XXX_Size() int {
	return m.Size()
}
func (m *RestakingPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_RestakingPacket.DiscardUnknown(m)
}

var xxx_messageInfo_RestakingPacket proto.InternalMessageInfo

func (m *RestakingPacket) GetType() RestakingPacket_PacketType {
	if m != nil {
		return m.Type
	}
	return RestakingPacket_Delegation
}

func (m *RestakingPacket) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterEnum("restaking_protocol.restaking.v1.RestakingPacket_PacketType", RestakingPacket_PacketType_name, RestakingPacket_PacketType_value)
	proto.RegisterType((*ValidatorSetChange)(nil), "restaking_protocol.restaking.v1.ValidatorSetChange")
	proto.RegisterType((*ValidatorSetChanges)(nil), "restaking_protocol.restaking.v1.ValidatorSetChanges")
	proto.RegisterType((*DelegationPacket)(nil), "restaking_protocol.restaking.v1.DelegationPacket")
	proto.RegisterType((*UndelegationPacket)(nil), "restaking_protocol.restaking.v1.UndelegationPacket")
	proto.RegisterType((*RestakingPacket)(nil), "restaking_protocol.restaking.v1.RestakingPacket")
}

func init() {
	proto.RegisterFile("restaking_protocol/restaking/v1/restaking.proto", fileDescriptor_63af7fa0c4c2b658)
}

var fileDescriptor_63af7fa0c4c2b658 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xd2, 0xa8, 0x52, 0x37, 0x55, 0x6a, 0xb6, 0x20, 0xa5, 0xa5, 0x72, 0x22, 0x0b, 0x89,
	0x70, 0x60, 0xad, 0xa4, 0x37, 0x90, 0x90, 0x48, 0xe1, 0x80, 0x38, 0x10, 0x19, 0xca, 0x81, 0x4b,
	0xb4, 0xb6, 0x57, 0xae, 0xe5, 0xd8, 0x6b, 0x79, 0x37, 0x16, 0xbe, 0xf3, 0x00, 0x3c, 0x05, 0x07,
	0x2e, 0xbc, 0x46, 0x8f, 0x3d, 0x72, 0x2a, 0x28, 0xb9, 0x20, 0x8e, 0x3c, 0x01, 0xda, 0x9f, 0xd4,
	0x01, 0x23, 0xf5, 0x01, 0x7a, 0xb2, 0xf7, 0xfb, 0xe6, 0xfb, 0x66, 0x66, 0x67, 0xb4, 0xd0, 0x2d,
	0x28, 0x17, 0x24, 0x89, 0xb3, 0x68, 0x96, 0x17, 0x4c, 0xb0, 0x80, 0xcd, 0x6b, 0xc8, 0x2d, 0x47,
	0xf5, 0x01, 0x2b, 0x1e, 0xf5, 0x9b, 0x02, 0x5c, 0xc7, 0x94, 0xa3, 0xc3, 0x83, 0x80, 0xf1, 0x94,
	0x71, 0xcd, 0xba, 0xfa, 0xa0, 0xb5, 0x87, 0x77, 0x22, 0x16, 0x31, 0x8d, 0xcb, 0x3f, 0x83, 0xde,
	0x13, 0x34, 0x0b, 0x69, 0x91, 0xc6, 0x99, 0x70, 0x89, 0x1f, 0xc4, 0xae, 0xa8, 0x72, 0xba, 0x96,
	0x1c, 0x6d, 0x90, 0x41, 0x51, 0xe5, 0x82, 0xb9, 0x09, 0xad, 0xd6, 0xac, 0xad, 0xed, 0x5d, 0x9f,
	0x70, 0xea, 0x96, 0x23, 0x9f, 0x0a, 0x32, 0x72, 0x03, 0x16, 0x67, 0x9a, 0x77, 0xbe, 0x02, 0x88,
	0xde, 0x91, 0x79, 0x1c, 0x12, 0xc1, 0x8a, 0x37, 0x54, 0x9c, 0x9c, 0x91, 0x2c, 0xa2, 0x88, 0xc1,
	0xdb, 0xe5, 0x1a, 0x9d, 0x2d, 0xf2, 0x90, 0x08, 0xca, 0x7b, 0x60, 0xb0, 0x35, 0xec, 0x8c, 0x07,
	0xb8, 0x4e, 0x88, 0x65, 0x35, 0xf8, 0x4a, 0x7f, 0xaa, 0x02, 0x27, 0x83, 0xf3, 0xcb, 0x7e, 0xeb,
	0xf7, 0x65, 0xbf, 0x57, 0x91, 0x74, 0xfe, 0xd8, 0x69, 0x18, 0x39, 0x9e, 0x55, 0xfe, 0x2d, 0xe1,
	0x68, 0x08, 0x25, 0xc6, 0xa9, 0x30, 0x41, 0xb3, 0x38, 0xec, 0xdd, 0x1a, 0x80, 0x61, 0xdb, 0xeb,
	0x6a, 0x5c, 0x07, 0xbe, 0x0c, 0x9d, 0x8f, 0x00, 0xee, 0x37, 0x2b, 0xe6, 0x28, 0x85, 0x77, 0xeb,
	0x4c, 0xd2, 0x28, 0xd0, 0x84, 0x29, 0xfb, 0x18, 0x5f, 0x33, 0x16, 0xdc, 0x34, 0x9d, 0xb4, 0x65,
	0x27, 0xde, 0x7e, 0xd9, 0x4c, 0xe7, 0xfc, 0x04, 0xd0, 0x7a, 0x4e, 0xe7, 0x34, 0x22, 0x22, 0x66,
	0xd9, 0x94, 0x04, 0x09, 0x15, 0xe8, 0x21, 0xb4, 0x58, 0x4e, 0x0b, 0x55, 0x02, 0x09, 0xc3, 0x82,
	0x72, 0x99, 0x1e, 0x0c, 0x77, 0xbc, 0xbd, 0x35, 0xfe, 0x4c, 0xc3, 0xe8, 0x05, 0xdc, 0xad, 0xcb,
	0xcd, 0x13, 0xd5, 0x6c, 0x67, 0x7c, 0xb4, 0x79, 0xb9, 0x7a, 0x9a, 0x78, 0xba, 0xf0, 0xe7, 0x71,
	0xf0, 0x8a, 0x56, 0xa6, 0x9c, 0xce, 0x95, 0x6e, 0x9a, 0x20, 0x1f, 0x6e, 0x93, 0x94, 0x2d, 0x32,
	0xd1, 0xdb, 0x52, 0x06, 0x07, 0xd8, 0xec, 0x93, 0x1c, 0x38, 0x36, 0x03, 0xc7, 0x27, 0x2c, 0xce,
	0x26, 0xae, 0x54, 0x7f, 0xf9, 0xde, 0x7f, 0x10, 0xc5, 0xe2, 0x6c, 0xe1, 0xe3, 0x80, 0xa5, 0x66,
	0xf9, 0xcc, 0xe7, 0x11, 0x0f, 0x13, 0xb3, 0x5a, 0x52, 0xe0, 0x19, 0x67, 0xe7, 0x17, 0x80, 0xe8,
	0x34, 0x0b, 0x6f, 0x46, 0xb3, 0x9f, 0x01, 0xdc, 0xf3, 0xd6, 0x6b, 0x61, 0x3a, 0x7d, 0x0d, 0xdb,
	0x32, 0x52, 0x75, 0xd7, 0x1d, 0x3f, 0xb9, 0x76, 0x93, 0xfe, 0xd1, 0x63, 0xfd, 0x79, 0x5b, 0xe5,
	0xd4, 0x53, 0x46, 0x08, 0xc1, 0x76, 0x48, 0x04, 0x51, 0xf7, 0xb0, 0xe3, 0xa9, 0x7f, 0x07, 0x43,
	0x58, 0xc7, 0xa1, 0x2e, 0x84, 0xf5, 0x76, 0x59, 0x2d, 0x64, 0xc1, 0xdd, 0xcd, 0x11, 0x58, 0x60,
	0xf2, 0xf4, 0x7c, 0x69, 0x83, 0x8b, 0xa5, 0x0d, 0x7e, 0x2c, 0x6d, 0xf0, 0x69, 0x65, 0xb7, 0x2e,
	0x56, 0x76, 0xeb, 0xdb, 0xca, 0x6e, 0xbd, 0xbf, 0xff, 0x9f, 0x17, 0xeb, 0xc3, 0xc6, 0x9b, 0xa5,
	0xba, 0xf6, 0xb7, 0x15, 0x77, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x61, 0xec, 0x18, 0xe0,
	0x04, 0x00, 0x00,
}

func (m *ValidatorSetChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValsetUpdateId != 0 {
		i = encodeVarintRestaking(dAtA, i, uint64(m.ValsetUpdateId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorUpdates) > 0 {
		for iNdEx := len(m.ValidatorUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSetChanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetChanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetChanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorSetChanges) > 0 {
		for iNdEx := len(m.ValidatorSetChanges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorSetChanges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRestaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ValidatorPk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ValidatorPk.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRestaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestakingPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestakingPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestakingPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRestaking(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRestaking(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRestaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovRestaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorSetChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorUpdates) > 0 {
		for _, e := range m.ValidatorUpdates {
			l = e.Size()
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	if m.ValsetUpdateId != 0 {
		n += 1 + sovRestaking(uint64(m.ValsetUpdateId))
	}
	return n
}

func (m *ValidatorSetChanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorSetChanges) > 0 {
		for _, e := range m.ValidatorSetChanges {
			l = e.Size()
			n += 1 + l + sovRestaking(uint64(l))
		}
	}
	return n
}

func (m *DelegationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = m.ValidatorPk.Size()
	n += 1 + l + sovRestaking(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *UndelegationPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	l = m.ValidatorPk.Size()
	n += 1 + l + sovRestaking(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovRestaking(uint64(l))
	return n
}

func (m *RestakingPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRestaking(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRestaking(uint64(l))
	}
	return n
}

func sovRestaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRestaking(x uint64) (n int) {
	return sovRestaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorSetChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorUpdates = append(m.ValidatorUpdates, types.ValidatorUpdate{})
			if err := m.ValidatorUpdates[len(m.ValidatorUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetUpdateId", wireType)
			}
			m.ValsetUpdateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValsetUpdateId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSetChanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetChanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetChanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetChanges = append(m.ValidatorSetChanges, ValidatorSetChange{})
			if err := m.ValidatorSetChanges[len(m.ValidatorSetChanges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorPk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestakingPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestakingPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestakingPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RestakingPacket_PacketType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRestaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRestaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRestaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRestaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRestaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRestaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRestaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRestaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRestaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRestaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRestaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRestaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRestaking = fmt.Errorf("proto: unexpected end of group")
)
